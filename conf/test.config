/*
 * -------------------------------------------------
 *  Nextflow config file for running tests
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 *   nextflow run nf-core/methylseq -profile test
 */

params {
  project_name            = 'test_run'
  project_description     = 'A simple imputation run on chrm 6 distributed with git repo'
  homedir                 = "${HOME}/imputation" // homedir: Path to your script, where the nextflow main script is located
  scripts                 = "${params.homedir}/scripts" // Scripts directory
  outDir                  = "output/${project_name}" // outDir: where to put all pipeline's outputs
  workDir                 = "${params.outDir}/work" // wordDir: Nextflow working directory
  scratch                 = "${PWD}"
  help                    = false
  max_memory = 2.GB
  max_cpus = 2
  max_time = 48.h

  // Reference panels
  ref_panels {
    testRefPanel {
      // Per chromosomes
      vcfFile     = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/refPanelTestdata_chr6.vcf.gz"
      m3vcfFile   = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/refPanelTestdata_chr6.m3vcf.gz"
      sampleFile  = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/refPanelTestdata.sample"
    }
    testRefPanel1 {
      // Per chromosomes
      vcfFile     = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/refPanelTestdata_chr6.vcf.gz"
      sampleFile  = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/refPanelTestdata.sample"
    }
  }

//  target_pops{ // where to extract datasets from ref panels
//    ref_panels_ext_pops = "YRI,LWK"
//  }

  // Study datasets
//  target_pops{ // datasets to extract from reference panels
//    YRI = "YRI"
//    LWK = "LWK"
//  }
  target_datasets { // datasets extracted already, all chromosomes in one
    testStudy   = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/targetTestdata.vcf.gz"
  }

  // Genetic map for eagle2
  eagle_genetic_map = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/genetic_map_Testdata.txt.gz"

  // Reference genome used for QC
  reference_genome        = "https://github.com/h3abionet/chipimputation/raw/test_data/testdata_imputation/hg19Testdata.fasta"

  // Use ALL or '' to use all available chromosome in the target dataset
  chromosomes = "6"

  // imputation parameters
  NE = "20000"
  impute_iter = "10"
  impute_burnin = "2" // must be less than impute_burnin
  impute_info_cutoff = "0.3"
  chunk_size = "20000000" // in base
  buffer_size = "1000000" // in base

  // Plink QC parameters
  cut_mind                = "0.05"

  // Phasing method: shapeit (default) or eagle2
  phasing_method          = "eagle"

  // Imputation method minimac4 (default) or IMPUTE2
  impute_method           = "minimac4"

  // Minimac4 option
  minRatio = '0.1'

  // Phasing method: eagle2 (default) or shapeit
  phasing_method          = "eagle"

  // Plink to use, sometimes it can be plink2
  plink="plink2"

}

timeline {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_timeline.html"
}
report {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_report.html"
}
trace {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_trace.txt"
}
dag {
  enabled = true
  file = "${params.outDir}/nextflow_reports/${params.project_name}_h3achipimputation_dag.png"
}

process {
// Process-specific resource requirements
  withLabel: 'medium' {
    errorStrategy = { task.exitStatus in [143, 137, 255] ? 'retry' : 'ignore' }
    memory = 1.GB
  }
  withLabel : 'bigmem' {
    errorStrategy = { task.exitStatus in [143, 137, 255] ? 'retry' : 'ignore' }
    memory = 1.GB
  }
}

profiles{
  singularity {
    singularity.runOptions = " -B ${params.scratch} " // add any paths that need   to be mounted here
  }
  slurm {
    queueSize = 10
  }
  test {
    queueSize = 10
  }
}